{"ast":null,"code":"import _toConsumableArray from \"/Users/rose/Documents/fromdesktop/pollwatch/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/rose/Documents/fromdesktop/pollwatch/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/rose/Documents/fromdesktop/pollwatch/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rose/Documents/fromdesktop/pollwatch/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rose/Documents/fromdesktop/pollwatch/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rose/Documents/fromdesktop/pollwatch/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rose/Documents/fromdesktop/pollwatch/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rose/Documents/fromdesktop/pollwatch/src/components/CreM.js\";\nimport React, { Component } from 'react';\nimport { Head4 } from '../styles/Head4';\nimport { Head3 } from '../styles/Head3';\nimport { Butt } from '../components/Butt';\nimport { Butt_Add } from '../components/Butt_Add';\nimport { Butt_Remv } from '../components/Butt_Remv';\nimport Titl_Crea from '../components/Titl_Crea';\nimport { MdRemove, MdPlaylistAdd } from 'react-icons/md';\nimport { IoMdTrash } from \"react-icons/io\";\nimport Poll_Inq from '../components/Poll_Inq';\n\nvar CreM =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CreM, _Component);\n\n  function CreM(props) {\n    var _this;\n\n    _classCallCheck(this, CreM);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreM).call(this, props));\n    _this.state = {\n      quesTion: \"\",\n      newItem: \"\",\n      listM: []\n    };\n    return _this;\n  } //incorporating local storage \n\n\n  _createClass(CreM, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.hydrateStateWithLocalStorage(); // add event listener to save state to localStorage\n      // when user leaves/refreshes the page\n\n      window.addEventListener(\"beforeunload\", this.saveStateToLocalStorage.bind(this));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"beforeunload\", this.saveStateToLocalStorage.bind(this)); // saves if component has a chance to unmount\n\n      this.saveStateToLocalStorage();\n    }\n  }, {\n    key: \"hydrateStateWithLocalStorage\",\n    value: function hydrateStateWithLocalStorage() {\n      // for all items in state\n      for (var key in this.state) {\n        // if the key exists in localStorage\n        if (localStorage.hasOwnProperty(key)) {\n          // get the key's value from localStorage\n          var value = localStorage.getItem(key); // parse the localStorage string and setState\n\n          try {\n            value = JSON.parse(value);\n            this.setState(_defineProperty({}, key, value));\n          } catch (e) {\n            // handle empty string\n            this.setState(_defineProperty({}, key, value));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"saveStateToLocalStorage\",\n    value: function saveStateToLocalStorage() {\n      // for every item in React state\n      for (var key in this.state) {\n        // save to localStorage\n        localStorage.setItem(key, JSON.stringify(this.state[key]));\n      }\n    }\n  }, {\n    key: \"updateInput\",\n    value: function updateInput(key, value) {\n      // update react state\n      this.setState(_defineProperty({}, key, value));\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem() {\n      // create a new item with unique id\n      var newItem = {\n        id: 1 + Math.random(),\n        value: this.state.newItem.slice()\n      }; // copy current list of items\n\n      var listM = _toConsumableArray(this.state.listM); // add the new item to the list\n\n\n      listM.push(newItem); // update state with new list, reset the new item input\n\n      this.setState({\n        listM: listM,\n        newItem: \"\"\n      });\n    }\n  }, {\n    key: \"deleteItem\",\n    value: function deleteItem(id) {\n      // copy current list of items\n      var listM = _toConsumableArray(this.state.listM); // filter out the item being deleted\n\n\n      var updatedList = listM.filter(function (item) {\n        return item.id !== id;\n      });\n      this.setState({\n        listM: updatedList\n      });\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(e) {\n      this.props.onClose && this.props.onClose(e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _React$createElement;\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-10 mx-auto col-md-8 mt-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"moda-fron\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.props.children, React.createElement(\"div\", {\n        className: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Poll_Inq, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"card card-body my-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"input-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"input\", (_React$createElement = {\n        type: \"text\",\n        className: \"form-control text-capitalize\",\n        placeholder: \"Type List of Answers\"\n      }, _defineProperty(_React$createElement, \"className\", \"txt-answ\"), _defineProperty(_React$createElement, \"value\", this.state.newItem), _defineProperty(_React$createElement, \"onChange\", function onChange(e) {\n        return _this2.updateInput(\"newItem\", e.target.value);\n      }), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement)), React.createElement(\"div\", {\n        className: \"input-group-append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Butt_Add, {\n        onClick: function onClick() {\n          return _this2.addItem();\n        },\n        disabled: !this.state.newItem.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(MdPlaylistAdd, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"input-group-append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"ulist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, this.state.listM.map(function (item) {\n        return React.createElement(\"li\", {\n          key: item.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"list\",\n          type: \"text\",\n          value: item.value,\n          readOnly: \"readOnly\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }), React.createElement(Butt_Remv, {\n          onClick: function onClick() {\n            return _this2.deleteItem(item.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(IoMdTrash, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        })));\n      }))))))));\n    }\n  }]);\n\n  return CreM;\n}(Component);\n\nexport { CreM as default };","map":{"version":3,"sources":["/Users/rose/Documents/fromdesktop/pollwatch/src/components/CreM.js"],"names":["React","Component","Head4","Head3","Butt","Butt_Add","Butt_Remv","Titl_Crea","MdRemove","MdPlaylistAdd","IoMdTrash","Poll_Inq","CreM","props","state","quesTion","newItem","listM","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","key","localStorage","hasOwnProperty","value","getItem","JSON","parse","setState","e","setItem","stringify","id","Math","random","slice","push","updatedList","filter","item","onClose","children","updateInput","target","addItem","length","map","deleteItem"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Head4 } from '../styles/Head4';\nimport { Head3 } from '../styles/Head3';\n\nimport { Butt } from '../components/Butt';\nimport { Butt_Add } from '../components/Butt_Add';\nimport { Butt_Remv } from '../components/Butt_Remv';\nimport Titl_Crea from '../components/Titl_Crea';\nimport { MdRemove, MdPlaylistAdd } from 'react-icons/md';\nimport { IoMdTrash } from \"react-icons/io\";\nimport Poll_Inq from '../components/Poll_Inq';\n\n\nexport default class CreM extends Component {\n\tconstructor(props) {\n    super(props);\n    this.state = {\n      quesTion:\"\",\n      newItem: \"\",\n      listM: []\n    };\n  }\n\n  //incorporating local storage \n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    // update react state\n    this.setState({ [key]: value });\n  }\n\n  addItem() {\n    // create a new item with unique id\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n \n    };\n\n    // copy current list of items\n    const listM = [...this.state.listM];\n\n    // add the new item to the list\n    listM.push(newItem);\n\n    // update state with new list, reset the new item input\n    this.setState({\n      listM,\n      newItem: \"\"\n    });\n  }\n\n  deleteItem(id) {\n    // copy current list of items\n    const listM = [...this.state.listM];\n    // filter out the item being deleted\n    const updatedList = listM.filter(item => item.id !== id);\n\n    this.setState({ listM: updatedList });\n  }\n\n  onClose(e) {\n    this.props.onClose && this.props.onClose(e);\n  }\n\n\n  render() {\n\treturn( \t\n\t\t<div className=\"container\">\n\t      <div className=\"row\">\n\t        <div className=\"col-10 mx-auto col-md-8 mt-4\">\n\t          \n\t\t      \n\t\t        <div className='moda-fron'>\n\t\t          {this.props.children}\n\n\t\t         \n\t\t            <div className=\"middle\">\n\t\t            <Poll_Inq/>\n\t\t\t\t\t  <div className=\"card card-body my-3\">\n\t\t\t\t\t \n\t\t\t\t\t\t  <div className=\"input-group\">\n\t      \n\t\t\t                <input\n\t\t\t                  type=\"text\"\n\t\t\t                  className=\"form-control text-capitalize\"\n\t\t\t                  placeholder=\"Type List of Answers\"\n\t\t\t                  className=\"txt-answ\"\n\t\t\t                  value={this.state.newItem}\n\t\t\t                  onChange={e => this.updateInput(\"newItem\", e.target.value)}\n\t\t\t                />\n\t\t\t\t\t\t  \n\t\t\t                <div className=\"input-group-append\">\n\t\t\t                  <Butt_Add\n\t\t\t                    onClick={() => this.addItem()}\n\t\t\t                    disabled={!this.state.newItem.length}\n\t\t\t                  >\n\t\t\t                  <MdPlaylistAdd/>\n\t\t\t                  </Butt_Add>\n\t\t\t                </div>\n\t\t\t\t      </div>\n\t\t\t\t          \t  \n\t\t              \t\t              \n\t\t\t\t\t  </div>\n\t\t              \n\t\t\t\t              <div className=\"input-group-append\">\n\n\t\t\t\t                <ul className=\"ulist\">\n\t\t\t\t                  {this.state.listM.map(item => {\n\t\t\t\t                    return (\n\t\t\t\t                      <li key={item.id}>\n\t\t\t\t                        <input className=\"list\" \n\t\t\t\t                        type=\"text\" \n\t\t\t\t                        value={item.value} \n\t\t\t\t                        readOnly=\"readOnly\"/>\n\t\t\t\t                        <Butt_Remv onClick={() => this.deleteItem(item.id)}>\n\t\t\t\t                          <IoMdTrash/>\n\t\t\t\t                        </Butt_Remv>\n\t\t\t\t                      </li>\n\t\t\t\t                    );\n\t\t\t\t                  })}\n\t\t\t\t                </ul>\n\t\t\t\t              </div>\n\t\t\t\t             \n\t\t            </div>\n\t\t            \n\t\t        </div>\n\t\t     \n\t            \n\t        </div>\n\t      </div>\n\t    </div>\t\t\n\t)\n   }\n}"]},"metadata":{},"sourceType":"module"}